---
- name: Run OpenSCAP Compliance Scan
  hosts: Linux
  become: true
  vars:
    scap_file: "/usr/share/xml/scap/ssg/content/ssg-rhel{{ ansible_distribution_major_version }}-ds.xml"

  tasks:
    - name: Make sure openscap-scanner and scap-security guide are installed (yum)
      ansible.builtin.yum:
        name:
          - openscap-scanner
          - scap-security-guide
        state: present
      when: ansible_pkg_mgr == "yum"

    - name: Make sure openscap-scanner and scap-security guide are installed (dnf)
      ansible.builtin.dnf:
        name:
          - openscap-scanner
          - scap-security-guide
        state: present
      when: ansible_pkg_mgr == "dnf"

    - name: Check if SCAP Security Guide (SSG) file exists
      ansible.builtin.stat:
        path: "{{ scap_file }}"
      register: scap_file_stat

    - name: Fail if SCAP content is missing
      ansible.builtin.fail:
        msg: "SCAP content file {{ scap_file }} not found on target system."
      when: not scap_file_stat.stat.exists

    - name: Get available SCAP profiles
      ansible.builtin.command: "oscap info {{ scap_file }}"
      register: profile_list
      changed_when: false

    - name: Extract SCAP profile IDs
      set_fact:
        available_profiles: "{{ profile_list.stdout_lines | select('search', 'Id:') | list }}"

    - name: Show available SCAP profiles
      ansible.builtin.debug:
        msg: "{{ available_profiles }}"

    - name: Auto-select first available profile if content_profile not defined
      set_fact:
        content_profile: "{{ available_profiles[0].split(':')[-1] | trim }}"
      when: content_profile is not defined and available_profiles | length > 0

    - name: Fail if no SCAP profiles were found
      ansible.builtin.fail:
        msg: "No SCAP profiles found in {{ scap_file }}."
      when: available_profiles | length == 0

    - name: Create Compliance Reports
      ansible.builtin.command: >
        oscap xccdf eval
        --profile xccdf_org.ssgproject.content_profile_{{ content_profile }}
        --results report.xml
        --report index.html
        {{ scap_file }}
      register: command_result
      failed_when: "'Error' in command_result.stderr"

    - name: Copy files to EE
      ansible.builtin.fetch:
        src: ./{{ item }}
        dest: "/tmp/{{ inventory_hostname }}/{{ item }}"
        flat: true
      loop:
        - report.xml
        - index.html

    - name: Copy folders to reports host
      ansible.builtin.copy:
        src: "/tmp/{{ inventory_hostname }}"
        dest: "{{ file_path }}"
        owner: root
        group: root
        mode: '0644'
      delegate_to: 172.25.225.97

    - name: DISPLAY LINK TO REPORT
      ansible.builtin.debug:
        msg: "http://172.25.225.97/openscap/{{ inventory_hostname }}"

    - name: Get results
      ansible.builtin.slurp:
        src: "/tmp/{{ inventory_hostname }}/report.xml"
      delegate_to: localhost
      register: scap_report_file

    - name: Set report facts
      ansible.builtin.set_fact:
        openscap_scan_results:
          benchmark_id: "{{ test_result['benchmark']['@id'] }}"
          total_rules_count: "{{ rule_result | length }}"
          score: "{{ test_result['score']['#text'] }}%"
          rule_results_count:
            fail: "{{ rule_result | json_query('@[?result==`fail`]') | length }}"
            pass: "{{ rule_result | json_query('@[?result==`pass`]') | length }}"
          severity_of_failed_rules_count:
            low: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'low') | list | length }}"
            medium: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'medium') | list | length }}"
            high: "{{ rule_result | json_query('@[?result==`fail`]') | selectattr('@severity', 'equalto', 'high') | list | length }}"
        cacheable: true
      vars:
        report_from_xml: "{{ scap_report_file.content | b64decode | ansible.utils.from_xml | replace('{http://checklists.nist.gov/xccdf/1.2}', '') }}"
        test_result: "{{ report_from_xml.Benchmark.TestResult }}"
        rule_result: "{{ test_result['rule-result'] }}"

